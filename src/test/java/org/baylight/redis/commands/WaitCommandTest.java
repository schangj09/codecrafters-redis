package org.baylight.redis.commands;

import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

import org.assertj.core.api.WithAssertions;
import org.baylight.redis.RedisServiceBase;
import org.baylight.redis.commands.RedisCommand.Type;
import org.baylight.redis.protocol.RespBulkString;
import org.baylight.redis.protocol.RespValue;

// Note: Generated by CodiumAI
// However, I had to do some work to clean up assertions and add verifications.

import org.junit.jupiter.api.Test;

public class WaitCommandTest implements WithAssertions {

    RespBulkString WAIT = new RespBulkString("wait".getBytes());

    @Test
    void test_toString() {
        WaitCommand waitCommand = new WaitCommand(2, 3);
        assertThat(waitCommand.toString())
                .isEqualTo("WaitCommand [numReplicas=2, timeoutMillis=3]");
    }

    // WaitCommand can be instantiated without arguments
    @Test
    public void test_instantiation_without_arguments() {
        // given

        // when
        WaitCommand waitCommand = new WaitCommand();

        // then
        assertThat(waitCommand).isNotNull();
        assertThat(waitCommand.getType()).isEqualTo(Type.WAIT);
    }

    // WaitCommand can be instantiated with a key and a value
    @Test
    public void test_instantiation_with_key_and_value() {
        // given
        int num = 5;
        long timeout = 555L;

        // when
        WaitCommand waitCommand = new WaitCommand(num, timeout);

        // then
        assertThat(waitCommand).isNotNull();
        assertThat(waitCommand.getType()).isEqualTo(Type.WAIT);
        assertThat(waitCommand.getNumReplicas()).isEqualTo(num);
        assertThat(waitCommand.getTimeoutMillis()).isEqualTo(timeout);
    }

    // WaitCommand calls the service to wait for replication
    @Test
    public void test_execute_calls_service() {
        // given
        int serviceCount = 7;
        int requestNum = 5;
        int expectedCount = 7;
        RedisServiceBase service = mock(RedisServiceBase.class);
        when(service.waitForReplicationServers(anyInt(), anyLong())).thenReturn(serviceCount);

        WaitCommand waitCommand = new WaitCommand();
        int num = 5;
        long timeout = 555L;
        RespBulkString numString = new RespBulkString(String.valueOf(requestNum).getBytes());
        RespBulkString timeoutString = new RespBulkString(String.valueOf(timeout).getBytes());
        waitCommand.setArgs(new RespValue[] { WAIT, numString, timeoutString });

        // when
        byte[] result = waitCommand.execute(service);

        // then
        assertThat(result).isEqualTo(String.format(":%d\r\n", expectedCount).getBytes());
        verify(service).waitForReplicationServers(eq(num), eq(timeout));
        verifyNoMoreInteractions(service);
    }

    // WaitCommand throws an IllegalArgumentException if a required argument is missing
    @Test
    public void test_throw_exception_if_required_argument_missing() {
        // given
        WaitCommand waitCommand = new WaitCommand();
        RespValue[] args = { WAIT, new RespBulkString("1".getBytes()) };

        // when
        Throwable throwable = catchThrowable(() -> waitCommand.setArgs(args));

        // then
        assertThat(throwable).isInstanceOf(IllegalArgumentException.class);
        assertThat(throwable.getMessage()).isEqualTo("WAIT: Missing required arg '' at index 2");
    }

    // WaitCommand throws an IllegalArgumentException if an unrecognized argument is passed
    @Test
    public void test_throw_exception_if_unrecognized_argument_passed() {
        // given
        WaitCommand waitCommand = new WaitCommand();
        RespValue[] args = { WAIT, new RespBulkString("mykey".getBytes()),
                new RespBulkString("2".getBytes()), new RespBulkString("unknown".getBytes()) };
        ;

        // when
        Throwable throwable = catchThrowable(() -> waitCommand.setArgs(args));

        // then
        assertThat(throwable).isInstanceOf(IllegalArgumentException.class);
        assertThat(throwable.getMessage()).isEqualTo(
                "WAIT: Invalid arg type, expected integer at index 1: BulkString [length=5, value=mykey]");
    }
}
