package org.baylight.redis.commands;

import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

import java.util.Map;

import org.assertj.core.api.WithAssertions;
import org.baylight.redis.LeaderService;
import org.baylight.redis.RedisServiceBase;
import org.baylight.redis.commands.ReplConfCommand.Option;
import org.baylight.redis.protocol.RespConstants;
import org.baylight.redis.protocol.RespSimpleStringValue;
import org.baylight.redis.protocol.RespValue;

// Note: Generated by CodiumAI
// However, I had to do some work to add verifications.

import org.junit.jupiter.api.Test;

public class ReplConfCommandTest implements WithAssertions {

    // When a valid key is provided, the execute method should return the value associated with the
    // key.
    @Test
    public void test_validKeyProvided_executeMethodShouldReturnValue() {
        // given
        RedisServiceBase service = mock(LeaderService.class);
        when(service.replicationConfirm(anyMap())).thenReturn(RespConstants.OK);
        ReplConfCommand command = new ReplConfCommand(Option.LISTENING_PORT, "1111");

        // when
        byte[] result = command.execute(service);

        // then
        assertThat(result).isEqualTo(RespConstants.OK);
        verify(service).replicationConfirm(eq(Map.of("0", new RespSimpleStringValue("REPLCONF"),
                "listening-port", new RespSimpleStringValue("1111"))));
        verifyNoMoreInteractions(service);
    }

    // When an expired key is provided, the execute method should delete the key and return NULL.
    @Test
    public void test_expiredKeyProvided_executeMethodShouldDeleteExpiredKeyAndReturnNull() {
        // given
        RedisServiceBase service = mock(LeaderService.class);
        when(service.replicationConfirm(anyMap())).thenReturn(RespConstants.OK);
        ReplConfCommand command = new ReplConfCommand(Option.CAPA, "psync2");

        // when
        byte[] result = command.execute(service);

        // then
        assertThat(result).isEqualTo(RespConstants.OK);
        verify(service).replicationConfirm(eq(Map.of("0", new RespSimpleStringValue("REPLCONF"),
                "capa", new RespSimpleStringValue("psync2"))));
        verifyNoMoreInteractions(service);
    }

    // When a non-existent key is provided, the execute method should return NULL.
    @Test
    public void test_nonExistentKeyProvided_executeMethodShouldReturnGetack() {
        // given
        RedisServiceBase service = mock(LeaderService.class);
        when(service.replicationConfirm(anyMap())).thenReturn(RespConstants.OK);
        ReplConfCommand command = new ReplConfCommand(Option.GETACK, "*");

        // when
        byte[] result = command.execute(service);

        // then
        assertThat(result).isEqualTo(RespConstants.OK);
        verify(service).replicationConfirm(eq(Map.of("0", new RespSimpleStringValue("REPLCONF"),
                "getack", new RespSimpleStringValue("*"))));
        verifyNoMoreInteractions(service);
    }

    // When setArgs is called with no arguments, an IllegalArgumentException should be thrown.
    @Test
    public void test_setArgsCalledWithNoArguments_illegalArgumentExceptionShouldBeThrown() {
        // given
        RespValue[] args = {};
        ReplConfCommand command = new ReplConfCommand();

        // when
        assertThatExceptionOfType(IllegalArgumentException.class)
                .isThrownBy(() -> command.setArgs(args))
                .withMessage("REPLCONF: Missing required arg '' at index 0");
    }

}