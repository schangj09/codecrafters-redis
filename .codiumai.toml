[tests]

## Testing framework to use - this can affect the content of the generated tests
## as well as the test run command.
## Possible values are:
##  Python: Pytest, Unittest
##  Javascript / Typescript: Jest, Mocha, Vitest, Karma, Jasmine, QUnit, React Testing Library
##    HOWEVER: running tests in JS / TS is at the moment only supported
##    for Jest, Mocha, Vitest, and React Testing Library
# framework = "Mocha"

## An additional Javascript utility library used to test your code, if any. 
## Possible values are None, Testing Library, Enzyme, or Chai. Not applicable to Python projects.
# utility_library = "Chai"

## A hint to the test generator about whether to use mocks or not. Possible values are true or false.
# use_mocks = false

## How many tests should be generated by default. Fewer tests is faster.
## Does not apply at the moment to extend-suite tests.
num_desired_tests = 8


## A multiline string, delimited with triple-quotes (""") serving as an example test that represents
## what you would like the generated tests to look like in terms of style, setup, etc.
reference_test = """
@Test
public void testReadArgsRequired() {
    // given
    String[] argSpec = { ":int", "c1:string", "c2" };
    ArgReader reader = new ArgReader("mycmd", argSpec);
    RespValue[] args = {
            new RespSimpleStringValue("23"),
            new RespSimpleStringValue("c1"),
            new RespSimpleStringValue("v1"),
            new RespSimpleStringValue("c2")
    };

    // when
    Map<String, RespValue> options = reader.readArgs(args);

    // then
    assertThat(options).hasSize(3);
    assertThat(options).isEqualTo(
            Map.of(
                    "0", new RespSimpleStringValue("23"),
                    "c1", new RespSimpleStringValue("v1"),
                    "c2", RespConstants.NULL_VALUE));
}"""



[tests.java]


## A multiline string, delimited with triple-quotes ("""),
## containing import declarations that will be added at the beginning to each test file. 
overrideImports = """
import org.assertj.core.api.WithAssertions;
import org.testng.annotations.Test;
"""

